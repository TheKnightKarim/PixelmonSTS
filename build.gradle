buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
repositories {
    jcenter()
}
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

// Taken from the internet. vvv
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'

// Sets the version number shown in the file name.
version = "1.1.8"

// Taken from the internet. vvv
sourceCompatibility = targetCompatibility = "1.8"
compileJava
        {
            sourceCompatibility = targetCompatibility = "1.8"
        }

// Enables use of the section character (ยง) instead of long tags. Thanks, Hiroku!
//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile)
        {
            task ->
                task.options.encoding = 'UTF-8'
                task.options.fork = true
        }

// Taken from the internet. vvv
repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                pixelmonsts {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                pixelmonsts {
                    source sourceSets.main
                }
            }
        }
    }
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    // Import Cable Libraries
    // Grab and include Sponge.
    compile 'org.spongepowered:spongeforge:1.12.2-2838-7.1.8:dev'
    shadow fileTree(dir: 'libs', include: 'gooeylibs-1.0.6.jar')

    compile 'net.luckperms:api:5.0'

    // Automatically grabs libraries from the libs folder and adds them to the project. Thanks, CraftSteamG!
//    provided fileTree(dir: 'libs', include: '*.jar')
    implementation fileTree(dir: 'libs', include: '*.jar')
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}
configurations {
    provided
    compile.extendsFrom provided
}

shadowJar {
    baseName = archivesBaseName
    classifier = null
    version = version + "-shadow"
    configurations = [project.configurations.shadow]
    minimize()
    exclude "META-INF/"
    //configurations = [project.configurations.compile]
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

    // Example for how to get properties into the manifest for reading by the runtime..
    jar {
        manifest {
            attributes([
                    "Specification-Title"     : "pixelmonsts",
                    "Specification-Vendor"    : "TheKnightKarim",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.version,
                    "Implementation-Vendor"   : "TheKnightKarim",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    jar.finalizedBy('reobfJar')